# prefix key
unbind C-b
setw -g prefix C-a
bind C-a send-prefix
set -g status-keys emacs

set -g default-terminal "tmux-256color"
set -ag terminal-overrides ",*256col*:Tc"

#+keymaps
bind -r ^k resizep -U 10
bind -r ^j resizep -D 10
bind -r ^h resizep -L 10
bind -r ^l resizep -R 10

bind = split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'

bind x confirm kill-pane
bind X confirm kill-window

bind C command-prompt -p "Name of new window: " "new-window -n '%%'"
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

bind -n C-S-Left swap-window -t -1\; select-window -t -1
bind -n C-S-Right swap-window -t +1\; select-window -t +1

bind b set-option -g status
#-keymaps

# settings
set -g base-index 1
set -g pane-base-index 1

# message text
setw -g message-style bg=yellow,fg=black
setw -g clock-mode-colour green

# pane number display
set -g pane-border-style fg=black
set -g pane-active-border-style fg=black

#+statusline
# set-option -g status-position bottom
set -g status-style bg=default
set -g status-style fg=default

set -g status-interval 1
set -g status-justify left

set -g window-status-style fg=white,bg=default
# setw -g window-status-format "#[bg=default,fg=colour102][#I]#W "
# setw -g window-status-current-format "#[fg=black,bg=green]#{?window_zoomed_flag,#[bg=blue],}[#I]#W "
setw -g window-status-format "#[bg=default,fg=colour102][#I]#W#F"
setw -g window-status-current-format "#[fg=black,bg=green][#I]#W#F"
# setw -g window-status-format "#[bg=default,fg=colour102]#I:#W#F#[bg=default] "
# setw -g window-status-current-format "#[fg=black,bg=green]#{?window_zoomed_flag,#[bg=blue],}#I:#W#F#[bg=default] "

setw -g window-status-separator " "

set -g status-left ""
# set -g status-left-length 300

# set -g status-right-length 500
set -g status-right '#[fg=cyan,bright]#{?client_prefix, #[reverse]<Prefix>#[noreverse] ,}'
set -ag status-right '#[fg=blue,bright,bg=default][#S]'
set -ag status-right '#[fg=yellow,bright,bg=default] %a %m/%d %H:%M'
#-statusline

# scrollback buffer
set-option -g history-limit 10000

# Allows for faster key repetition
set -s escape-time 50
set -g repeat-time 1000

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Activity monitoring
# setw -g monitor-activity on
# set -g visual-activity on

# auto window rename
setw -g automatic-rename

# from powerline
run-shell "tmux set-environment -g TMUX_VERSION_MAJOR $(tmux -V | cut -d' ' -f2 | cut -d'.' -f1 | sed 's/[^0-9]*//g')"
run-shell "tmux set-environment -g TMUX_VERSION_MINOR $(tmux -V | cut -d' ' -f2 | cut -d'.' -f2 | sed 's/[^0-9]*//g')"

# Vi copypaste mode
setw -g mode-keys vi
if-shell "test '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -ge 4 \)'" 'bind -Tcopy-mode-vi v send -X begin-selection; bind-key -Tcopy-mode-vi y send -X copy-selection-and-cancel'
if-shell '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -lt 4\) -o #{$TMUX_VERSION_MAJOR} -le 1' 'bind -t vi-copy v begin-selection; bind-key -t vi-copy y copy-selection'

# status bar
if-shell '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -lt 2\) -o #{$TMUX_VERSION_MAJOR} -le 1' 'setw -g status-utf8 on'

# rm mouse mode fail
if-shell '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -ge 1\)' 'set -g mouse off'
if-shell '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -lt 1\) -o #{$TMUX_VERSION_MAJOR} -le 1' 'set -g mode-mouse off'

# # fix pane_current_path on new window and splits
# if-shell "test '#{$TMUX_VERSION_MAJOR} -gt 1 -o \( #{$TMUX_VERSION_MAJOR} -eq 1 -a #{$TMUX_VERSION_MINOR} -ge 8 \)'" 'unbind c; bind c new-window -c "#{pane_current_path}"'
# if-shell "test '#{$TMUX_VERSION_MAJOR} -gt 1 -o \( #{$TMUX_VERSION_MAJOR} -eq 1 -a #{$TMUX_VERSION_MINOR} -ge 8 \)'" "unbind '\"'; bind '\"' split-window -v -c '#{pane_current_path}'"
# if-shell "test '#{$TMUX_VERSION_MAJOR} -gt 1 -o \( #{$TMUX_VERSION_MAJOR} -eq 1 -a #{$TMUX_VERSION_MINOR} -ge 8 \)'" 'unbind v; bind v split-window -h -c "#{pane_current_path}"'
# if-shell "test '#{$TMUX_VERSION_MAJOR} -gt 1 -o \( #{$TMUX_VERSION_MAJOR} -eq 1 -a #{$TMUX_VERSION_MINOR} -ge 8 \)'" 'unbind "%"; bind % split-window -h -c "#{pane_current_path}"'


# Colors
# How to use true colors in vim under tmux? #1246 for 2.6 and higher
# https://github.com/tmux/tmux/issues/1246:
# 2.5 and lower:
# set -g default-terminal "screen-256color"

# Doesn't work on iterm2 / mac
# if-shell "test '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -ge 6 \)'" 'set -g default-terminal "tmux-256color"'
# if-shell "test '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -ge 6 \)'" 'set -ga terminal-overrides ",*256col*:Tc"'

# Try screen256-color (https://github.com/tmux/tmux/issues/622):
if-shell "test '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -ge 6 \)'" 'set -g default-terminal "screen-256color"'
if-shell "test '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -ge 6 \)'" 'set -ga terminal-overrides ",screen-256color:Tc"'

if-shell '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -lt 6\) -o #{$TMUX_VERSION_MAJOR} -le 1' 'set -g default-terminal "screen-256color"'
